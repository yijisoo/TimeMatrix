/* ------------------------------------------------------------------
 * GraphtoTSPConverter.java
 * 
 * Created 2008-12-08 by Niklas Elmqvist <elm@purdue.edu>.
 * Borrowed 2009-03-04 by Ji Soo Yi <yij@purdue.edu>.
 * ------------------------------------------------------------------
 */

package edu.purdue.timematrix.conversion;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Collection;
import java.util.Date;

import javax.swing.JFileChooser;

import edu.purdue.timematrix.aggregation.AggGraph;
import edu.purdue.timematrix.aggregation.AggGraph.AggEdge;
import edu.purdue.timematrix.aggregation.AggGraph.AggNode;
import edu.purdue.timematrix.graph.BasicGraph;
import edu.purdue.timematrix.graph.Graph;
import edu.purdue.timematrix.io.GraphMLReader;

public class GraphtoTSPConverter {
	private static final long serialVersionUID = 1L;
	private Graph graph = new BasicGraph("graph");
	private AggGraph aggGraph;
	
	public GraphtoTSPConverter () {
		JFileChooser fileChooser = new JFileChooser(".");
        int ret = fileChooser.showOpenDialog(null);
        if (ret != JFileChooser.APPROVE_OPTION) {
        	System.err.println("User cancelation.");
        	return;
        }
        
        if (!loadGraph(fileChooser.getSelectedFile())) {
        	System.err.println("Failed to load graph file: " + fileChooser.getSelectedFile());
        	return;
        }

        aggGraph = new AggGraph(graph);
    	int numCulled = aggGraph.cullEmptyNodes();
    	System.err.println("Culled " + numCulled + " empty nodes.");
        
    	String outFileName = fileChooser.getSelectedFile().getAbsolutePath() + ".tsp";
        if (!generateTSPFile(outFileName)) {
        	System.err.println("Failed to create TSP file: " + outFileName);
        	return;
        }

        System.err.println("Successfully create TSP file: " + outFileName);
	}
	
  	
	private boolean generateTSPFile(String outFileName) {
		// Now write the graph
		try { 
			PrintWriter pw = new PrintWriter(new BufferedWriter(new FileWriter(outFileName)));
			
			int n = aggGraph.getNodeCount();
			
			// Boilerplate:
			// The following example shows the TSP format used for Concorde TSP Solver
			// The example can be found at http://plato.asu.edu/tsplib.pdf
			//
			//NAME: brazil58
			//TYPE: TSP
			//COMMENT: 58 cities in Brazil (Ferreira)
			//DIMENSION: 58
			//EDGE_WEIGHT_TYPE: EXPLICIT
			//EDGE_WEIGHT_FORMAT: UPPER_ROW 
			//EDGE_WEIGHT_SECTION
			//
			// Using genetic algorithm, we might be able to implement a quick and light TSP solver 
			// inside of the TimeMatrix
			// http://www.mac.cie.uva.es/~arratia/cursos/UVA/GeneticTSP/JAVASimultn/TSP.html

			pw.println("NAME: " + outFileName);
			pw.println("TYPE: TSP");
			DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
            Date date = new Date();
            String datetime = dateFormat.format(date);
			pw.println("COMMENT: This TSP file is generated by GraphtoTSPConverter at " + datetime);
			pw.println("DIMENSION: " + n);
			pw.println("EDGE_WEIGHT_TYPE: EXPLICIT");
			pw.println("EDGE_WEIGHT_FORMAT: UPPER_ROW");
			pw.println("EDGE_WEIGHT_SECTION");
			
			
			int[][]  weight_matrix = new int[n][n];
			int max_weight = Integer.MIN_VALUE;
			
			// Collect Weights 
			
			for (int i = 0; i < n; i++) {
				for (int j = i+1; j < n; j++) {
					AggNode srcNode = aggGraph.getNode(i);
					AggNode dstNode = aggGraph.getNode(j);
					AggEdge edge = srcNode.getConnectingEdge(dstNode);
					
					if (edge != null) {
						Collection<Integer> rows = edge.getAllItems();
						weight_matrix[i][j] = rows.size();
						if (rows.size() > max_weight) max_weight = rows.size();
					}
					else {
						weight_matrix[i][j] = 0;
					}
				}
				
			}
			
			// Print Distance (= Max_Weights / Weights)
			
			for (int i = 0; i < n; i++) {
				for (int j = i+1; j < n; j++) {
					float distance;
					if (weight_matrix[i][j] != 0) {
						distance = (float) max_weight / weight_matrix[i][j];
					}
					else {
						distance = max_weight * 10;
					}
					pw.print (distance + " ");
				}
				pw.println("");
			}
			
			pw.println("EOF");			
			pw.close();
		}
		catch (IOException e) { 
			e.printStackTrace();
			return false;
		}
		
		return true;
	}
	
	private boolean loadGraph(File file) {
		try {
			InputStream in = new FileInputStream(file);
			GraphMLReader reader = new GraphMLReader(in, "graph", graph);
			reader.load();
			System.err.println("Read " + (graph.isDirected() ? "directed" : "undirected") + " graph '" + graph.getName() + "' with " + graph.getVerticesCount() + " vertices and " + graph.getEdgesCount() + " edges.");
			return true;
		}
		catch (IOException e) {
			e.printStackTrace();
			return false;
		}
	}
	
	public static void main(String[] args) {
		new GraphtoTSPConverter();
	}
}
